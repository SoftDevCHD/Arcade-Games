
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

import java.io.File;
import java.io.IOException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Clare
 */
public class gameOverFrame extends javax.swing.JFrame {

    /**
     * Creates new form gameOverFrame
     */
    public gameOverFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameOverFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameOverFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameOverFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameOverFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ;
            }
        });
    }
    
    public static void gameOverFrame(int score) {    //This is the frame that displays at the end of the game
        JFrame gameOver = new JFrame("Game Over");  //Creates frame
        gameOver.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        basic g = new basic();  //Creates background
        //Default buttons size
        int Dhori = 110;
        int Dvert = 30;
        
        //High Score Read/Write
        int count = 1;
        try {
            int readScore = 0;
            String filename = "src//highscore.txt";
            File file = new File(filename);
            Scanner scan = new Scanner(file);
            
            String line1, line2, line3, line4, line5, line6, line7, line8;
            line1 = scan.nextLine();
            line2 = scan.nextLine();
            line3 = scan.nextLine();
            line4 = scan.nextLine();
            line5 = scan.nextLine();
            line6 = scan.nextLine();
            line7 = scan.nextLine();
            line8 = scan.nextLine();
            System.out.println(line1 + line2);
            System.out.println(line3 + line4);
            System.out.println(line5 + line6);
            System.out.println(line7 + line8);
            
            FileWriter fw = new FileWriter(file);
            PrintWriter pw = new PrintWriter(fw);
            
            while (count <= 4) {
                switch (count) {
                    case 1:
                        readScore = Integer.parseInt(line1);
                        break;
                    case 2:
                        readScore = Integer.parseInt(line3);
                        break;
                    case 3:
                        readScore = Integer.parseInt(line5);
                        break;
                    case 4:
                        readScore = Integer.parseInt(line7);
                        break;
                }
                if(readScore < score) {
                    //Set up the new high score
                    System.out.println("You beat the high score " + count);
                    
                    String inputNewScore = JOptionPane.showInputDialog(gameOver, "You beat the high score! Input your initials or cancel to quit.", null);
                    System.out.println(inputNewScore);
                    if(inputNewScore != null) {
                        switch (count) {
                            case 1:
                                line7 = line5;
                                line8 = line6;
                                line5 = line3;
                                line6 = line4;
                                line3 = line1;
                                line4 = line2;
                                line1 = String.valueOf(score);
                                line2 = inputNewScore;
                                break;
                            case 2:
                                line7 = line5;
                                line8 = line6;
                                line5 = line3;
                                line6 = line4;
                                line3 = String.valueOf(score);
                                line4 = inputNewScore;
                                break;
                            case 3:
                                line7 = line5;
                                line8 = line6;
                                line5 = String.valueOf(score);
                                line6 = inputNewScore;
                                break;
                            case 4:
                                line7 = String.valueOf(score);
                                line8 = inputNewScore;
                                break;
                        }
                    }
                    break;
                }
                count++;
            }
            
            pw.println(line1);
            pw.println(line2);
            pw.println(line3);
            pw.println(line4);
            pw.println(line5);
            pw.println(line6);
            pw.println(line7);
            pw.println(line8);
            
            pw.close();
        }
        catch (IOException e) {
            System.out.println("Error, file not found");
        }
        
        
        JButton retry = new JButton("Retry");   //Creates button
        retry.addActionListener(new ActionListener() {  //Adds action listener to button
            public void actionPerformed(ActionEvent e) {
                gameFrame.setChecksTrue();
                gameOver.dispose();
                menuFrame.getMenu().setVisible(true);
            }
        });
        
        JButton exit = new JButton("Exit"); //Creates button
        exit.addActionListener(new ActionListener() {   //Adds action listener to button
            public void actionPerformed(ActionEvent e) {
                gameOver.dispose();
                System.exit(0);
            }
        });
        
        //Creating labels
        JLabel title = new JLabel("GAME OVER");
        title.setFont(new Font("Verdana", Font.BOLD, 18));
        title.setForeground(Color.BLACK);
        JLabel displayScore = new JLabel("Score: " + score);
        displayScore.setFont(new Font("Verdana", Font.BOLD, 14));
        displayScore.setForeground(score > 60 ? Color.blue : Color.red);
        
        //Determines position and dimensions
        title.setBounds(240, 10, 200, 50);
        displayScore.setBounds(10, 50, 100, 50);
        gameOver.add(title);
        gameOver.add(displayScore);
        
        //Adds buttons to frame
        gameOver.add(retry);
        gameOver.add(exit);
        
        //Determines the size and position of the buttons
        retry.setBounds(450, 350, Dhori, Dvert);
        exit.setBounds(30, 350, Dhori, Dvert);
        
        //Draws background on frame and makes it visible
        gameOver.add(g);
        gameOver.pack();
        gameOver.setVisible(true);
        gameOver.setLocationRelativeTo(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}