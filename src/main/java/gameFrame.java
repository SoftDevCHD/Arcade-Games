
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.util.Date;
import java.util.Random;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.KeyStroke;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Clare
 */
public class gameFrame extends javax.swing.JFrame {
    private static int success = 0;
    private static int fail = 0;
    private static int counter = 0;
    private static int score = 100;
    private static boolean aCheck = true;
    private static boolean bCheck = true;
    private static boolean cCheck = true;
    private static boolean dCheck = true;
    private static boolean eCheck = true;
    private static boolean fCheck = true;
    private static boolean gCheck = true;
    private static boolean hCheck = true;
    private static boolean iCheck = true;
    private static boolean jCheck = true;
    private static boolean kCheck = true;
    private static boolean lCheck = true;
    private static boolean mCheck = true;
    private static boolean nCheck = true;
    private static boolean oCheck = true;
    private static boolean pCheck = true;
    private static boolean qCheck = true;
    private static boolean rCheck = true;
    private static boolean sCheck = true;
    private static boolean tCheck = true;
    private static boolean uCheck = true;
    private static boolean vCheck = true;
    private static boolean wCheck = true;
    private static boolean xCheck = true;
    private static boolean yCheck = true;
    private static boolean zCheck = true;

    /**
     * Creates new form gameFrame
     */
    public gameFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ;
            }
        });
    }
    
    public static void setChecksTrue() {
        aCheck = true;
        bCheck = true;
        cCheck = true;
        dCheck = true;
        eCheck = true;
        fCheck = true;
        gCheck = true;
        hCheck = true;
        iCheck = true;
        jCheck = true;
        kCheck = true;
        lCheck = true;
        mCheck = true;
        nCheck = true;
        oCheck = true;
        pCheck = true;
        qCheck = true;
        rCheck = true;
        sCheck = true;
        tCheck = true;
        uCheck = true;
        vCheck = true;
        wCheck = true;
        xCheck = true;
        yCheck = true;
        zCheck = true;
    }

    public static void gameFrame() {    //This is the fame that contains the game
        JFrame game = new JFrame("Game");   //Creates frame
        game.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        score = 100;
        success = 0;
        fail = 0;
        
        basic g = new basic();  //Creates background
        
        //Default button dimensions
        int Dhori = 110;
        int Dvert = 30;
        int Lhori = 42;
        int Lvert = 20;
        
        //Letter button locations
        int bdown = 310;
        int bhori = 10;
        int bvertoffset = 30;
        int bhorioffset = 45;
        
        //Label locations
        int ldown = 250;
        int lvertoffset = 5;
        
        //RNG, number between 1 and 5
        Random rand = new Random();
        int random = rand.nextInt(5) + 1;
        
        //Making game name label
        JLabel gameLabel = new JLabel("HANGMAN");
        gameLabel.setFont(new Font("Verdana", Font.BOLD, 18));
        gameLabel.setForeground(Color.BLUE);
        Dimension size = gameLabel.getPreferredSize();
        gameLabel.setBounds(10, 10, size.width, size.height);
        
        //Making score label
        JLabel displayScore = new JLabel("Score: " + score);
        displayScore.setFont(new Font("Verdana", Font.BOLD, 14));
        displayScore.setForeground(Color.blue);
        displayScore.setBounds(10, 50, 90, 50);
        
        //Making hangman picture
        JLabel hangman = new JLabel();
        hangman.setIcon(new ImageIcon("src\\noose.png"));
        hangman.setBounds(130, 40, 300, 200);
        game.add(hangman);
        
        //Words displayed depending on random number
        String word = "null";
        String displayWord = "null";
        String emptyWord = "null";
        switch(random) {
            case 1:
                word = "abstract";
                displayWord = "a b s t r a c t";
                emptyWord = "_ _ _ _ _ _ _ _";
                counter = 6;
                break;
            case 2:
                word = "cemetery";
                displayWord = "c e m e t e r y";
                emptyWord = "_ _ _ _ _ _ _ _";
                counter = 6;
                break;
            case 3:
                word = "nurse";
                displayWord = "n u r s e";
                emptyWord = "_ _ _ _ _";
                counter = 5;
                break;
            case 4:
                word = "pharmacy";
                displayWord = "p h a r m a c y";
                emptyWord = "_ _ _ _ _ _ _ _";
                counter = 7;
                break;
            case 5:
                word = "climbing";
                displayWord = "c l i m b i n g";
                emptyWord = "_ _ _ _ _ _ _ _";
                counter = 7;
                break;
        }
        
        final String realWord = word;
        final int realRand = random;
        System.out.println(random + " " +realWord);
        
        //Display words
        JLabel displayLines = new JLabel(emptyWord);
        displayLines.setBounds(220, ldown, 200, 50);
        displayLines.setFont(new Font("Verdana", Font.BOLD, 18));
        game.add(displayLines);
        
        //Create killbind keybind
        game.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "EXIT");
        game.getRootPane().getActionMap().put("EXIT", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
            game.dispose();
            System.exit(0);
            }
        });
        
        //KeyBindings: Popup
        game.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("F1"), "POPUP");
        game.getRootPane().getActionMap().put("POPUP", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                popup.popWindow();
            }
        });
        
        //Buttons
        JButton a = new JButton("A");
        final JLabel aDisplay = new JLabel();
        aDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        aDisplay.setForeground(Color.BLACK);
        aDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        a.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(aCheck) {
                    if(realRand == 1) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        aDisplay.setText("A             A");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        aDisplay.setText("      A       A");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    a.setBackground(Color.BLACK);
                    a.setOpaque(true);
                }
                aCheck = false;
            }
        });
        game.add(aDisplay);
        a.setBounds(bhori, bdown, Lhori, Lvert);
        game.add(a);
        
        JButton b = new JButton("B");
        final JLabel bDisplay = new JLabel();
        bDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        bDisplay.setForeground(Color.BLACK);
        bDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        b.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(bCheck) {
                    if(realRand == 1) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        bDisplay.setText("   B");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        bDisplay.setText("            B");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    b.setBackground(Color.BLACK);
                    b.setOpaque(true);
                }
                bCheck = false;
            }
        });
        game.add(bDisplay);
        b.setBounds(bhori + bhorioffset, bdown, Lhori, Lvert);
        game.add(b);
        
        JButton c = new JButton("C");
        final JLabel cDisplay = new JLabel();
        cDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        cDisplay.setForeground(Color.BLACK);
        cDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        c.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(cCheck) {
                    if(realRand == 1) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        cDisplay.setText("                   C");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        cDisplay.setText("                   C");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        cDisplay.setText("C");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 2) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        cDisplay.setText("C");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    c.setBackground(Color.BLACK);
                    c.setOpaque(true);
                }
                cCheck = false;
            }
        });
        game.add(cDisplay);
        c.setBounds(bhori + bhorioffset*2, bdown, Lhori, Lvert);
        game.add(c);
        
        JButton d = new JButton("D");
        final JLabel dDisplay = new JLabel();
        dDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        dDisplay.setForeground(Color.BLACK);
        dDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        d.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(dCheck) {
                    if(realRand == 42) {
                        colorGameFrame.colorGameFrame(score);
                        game.dispose();
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    d.setBackground(Color.BLACK);
                    d.setOpaque(true);
                }
                dCheck = false;
            }
        });
        game.add(dDisplay);
        d.setBounds(bhori + bhorioffset*3, bdown, Lhori, Lvert);
        game.add(d);
        
        JButton ee = new JButton("E");
        final JLabel eDisplay = new JLabel();
        eDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        eDisplay.setForeground(Color.BLACK);
        eDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        ee.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(eCheck) {
                    if(realRand == 2) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        eDisplay.setText("   E    E     E");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 3) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        eDisplay.setText("             E");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    ee.setBackground(Color.BLACK);
                    ee.setOpaque(true);
                }
                eCheck = false;
            }
        });
        game.add(eDisplay);
        ee.setBounds(bhori + bhorioffset*4, bdown, Lhori, Lvert);
        game.add(ee);
        
        JButton f = new JButton("F");
        final JLabel fDisplay = new JLabel();
        fDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        fDisplay.setForeground(Color.BLACK);
        fDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        f.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(fCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        fDisplay.setText("                   C");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    f.setBackground(Color.BLACK);
                    f.setOpaque(true);
                }
                fCheck = false;
            }
        });
        game.add(fDisplay);
        f.setBounds(bhori + bhorioffset*5, bdown, Lhori, Lvert);
        game.add(f);
        
        JButton gg = new JButton("G");
        final JLabel gDisplay = new JLabel();
        gDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        gDisplay.setForeground(Color.BLACK);
        gDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        gg.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(gCheck) {
                    if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        gDisplay.setText("                      G");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    gg.setBackground(Color.BLACK);
                    gg.setOpaque(true);
                }
                gCheck = false;
            }
        });
        game.add(gDisplay);
        gg.setBounds(bhori + bhorioffset*6, bdown, Lhori, Lvert);
        game.add(gg);
        
        JButton h = new JButton("H");
        final JLabel hDisplay = new JLabel();
        hDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        hDisplay.setForeground(Color.BLACK);
        hDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        h.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(hCheck) {
                    if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        hDisplay.setText("   H");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    h.setBackground(Color.BLACK);
                    h.setOpaque(true);
                }
                hCheck = false;
            }
        });
        game.add(hDisplay);
        h.setBounds(bhori + bhorioffset*7, bdown, Lhori, Lvert);
        game.add(h);
        
        JButton i = new JButton("I");
        final JLabel iDisplay = new JLabel();
        iDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        iDisplay.setForeground(Color.BLACK);
        iDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        i.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(iCheck) {
                    if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        iDisplay.setText("      I        I");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    i.setBackground(Color.BLACK);
                    i.setOpaque(true);
                }
                iCheck = false;
            }
        });
        game.add(iDisplay);
        i.setBounds(bhori + bhorioffset*8, bdown, Lhori, Lvert);
        game.add(i);
        
        JButton j = new JButton("J");
        final JLabel jDisplay = new JLabel();
        jDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        jDisplay.setForeground(Color.BLACK);
        jDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        j.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(jCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        jDisplay.setText("                   J");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    j.setBackground(Color.BLACK);
                    j.setOpaque(true);
                }
                jCheck = false;
            }
        });
        game.add(jDisplay);
        j.setBounds(bhori + bhorioffset*9, bdown, Lhori, Lvert);
        game.add(j);
        
        JButton k = new JButton("K");
        final JLabel kDisplay = new JLabel();
        kDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        kDisplay.setForeground(Color.BLACK);
        kDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        k.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(kCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        kDisplay.setText("                   J");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    k.setBackground(Color.BLACK);
                    k.setOpaque(true);
                }
                kCheck = false;
            }
        });
        game.add(kDisplay);
        k.setBounds(bhori + bhorioffset*10, bdown, Lhori, Lvert);
        game.add(k);
        
        JButton l = new JButton("L");
        final JLabel lDisplay = new JLabel();
        lDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        lDisplay.setForeground(Color.BLACK);
        lDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        l.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(lCheck) {
                    if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        lDisplay.setText("   L");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    l.setBackground(Color.BLACK);
                    l.setOpaque(true);
                }
                lCheck = false;
            }
        });
        game.add(lDisplay);
        l.setBounds(bhori + bhorioffset*11, bdown, Lhori, Lvert);
        game.add(l);
        
        JButton m = new JButton("M");
        final JLabel mDisplay = new JLabel();
        mDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        mDisplay.setForeground(Color.BLACK);
        mDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        m.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(mCheck) {
                    if(realRand == 2) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        mDisplay.setText("      M");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        mDisplay.setText("            M");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        mDisplay.setText("         M");
                        System.out.println("Success: " + success);
                    }
                    
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    m.setBackground(Color.BLACK);
                    m.setOpaque(true);
                }
                mCheck = false;
            }
        });
        game.add(mDisplay);
        m.setBounds(bhori + bhorioffset*12, bdown, Lhori+2, Lvert);
        game.add(m);
        
        JButton n = new JButton("N");
        final JLabel nDisplay = new JLabel();
        nDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        nDisplay.setForeground(Color.BLACK);
        nDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        n.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(nCheck) {
                    if(realRand == 3) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        nDisplay.setText("N");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 5) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        nDisplay.setText("                   N");
                        System.out.println("Success: " + success);
                    }
                    
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    n.setBackground(Color.BLACK);
                    n.setOpaque(true);
                }
                nCheck = false;
            }
        });
        game.add(nDisplay);
        n.setBounds(bhori, bdown + bvertoffset, Lhori, Lvert);
        game.add(n);
        
        JButton o = new JButton("o");
        final JLabel oDisplay = new JLabel();
        oDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        oDisplay.setForeground(Color.BLACK);
        oDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        o.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(oCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        oDisplay.setText("");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    o.setBackground(Color.BLACK);
                    o.setOpaque(true);
                }
                oCheck = false;
            }
        });
        game.add(oDisplay);
        o.setBounds(bhori + bhorioffset, bdown + bvertoffset, Lhori, Lvert);
        game.add(o);
        
        JButton p = new JButton("P");
        final JLabel pDisplay = new JLabel();
        pDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        pDisplay.setForeground(Color.BLACK);
        pDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        p.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(pCheck) {
                    if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        pDisplay.setText("P");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    p.setBackground(Color.BLACK);
                    p.setOpaque(true);
                }
                pCheck = false;
            }
        });
        game.add(pDisplay);
        p.setBounds(bhori + bhorioffset*2, bdown + bvertoffset, Lhori, Lvert);
        game.add(p);
        
        JButton q = new JButton("q");
        final JLabel qDisplay = new JLabel();
        qDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        qDisplay.setForeground(Color.BLACK);
        qDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        q.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(qCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        qDisplay.setText("");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    q.setBackground(Color.BLACK);
                    q.setOpaque(true);
                }
                qCheck = false;
            }
        });
        game.add(qDisplay);
        q.setBounds(bhori + bhorioffset*3, bdown + bvertoffset, Lhori, Lvert);
        game.add(q);
        
        JButton r = new JButton("R");
        final JLabel rDisplay = new JLabel();
        rDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        rDisplay.setForeground(Color.BLACK);
        rDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        r.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(rCheck) {
                    if(realRand == 1) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        rDisplay.setText("            R");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 2) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        rDisplay.setText("                   R");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 3) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        rDisplay.setText("      R");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        rDisplay.setText("         R");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    r.setBackground(Color.BLACK);
                    r.setOpaque(true);
                }
                rCheck = false;
            }
        });
        game.add(rDisplay);
        r.setBounds(bhori + bhorioffset*4, bdown + bvertoffset, Lhori, Lvert);
        game.add(r);
        
        JButton s = new JButton("S");
        final JLabel sDisplay = new JLabel();
        sDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        sDisplay.setForeground(Color.BLACK);
        sDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        s.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(sCheck) {
                    if(realRand == 1) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        sDisplay.setText("      S");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 3) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        sDisplay.setText("          S");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    s.setBackground(Color.BLACK);
                    s.setOpaque(true);
                }
                sCheck = false;
            }
        });
        game.add(sDisplay);
        s.setBounds(bhori + bhorioffset*5, bdown + bvertoffset, Lhori, Lvert);
        game.add(s);
        
        JButton t = new JButton("T");
        final JLabel tDisplay = new JLabel();
        tDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        tDisplay.setForeground(Color.BLACK);
        tDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        t.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(tCheck) {
                    if(realRand == 1) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        tDisplay.setText("         T           T");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 2) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        tDisplay.setText("            T");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    t.setBackground(Color.BLACK);
                    t.setOpaque(true);
                }
                tCheck = false;
            }
        });
        game.add(tDisplay);
        t.setBounds(bhori + bhorioffset*6, bdown + bvertoffset, Lhori, Lvert);
        game.add(t);
        
        JButton u = new JButton("U");
        final JLabel uDisplay = new JLabel();
        uDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        uDisplay.setForeground(Color.BLACK);
        uDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        u.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(uCheck) {
                    if(realRand == 3) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        uDisplay.setText("   U");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    u.setBackground(Color.BLACK);
                    u.setOpaque(true);
                }
                uCheck = false;
            }
        });
        game.add(uDisplay);
        u.setBounds(bhori + bhorioffset*7, bdown + bvertoffset, Lhori, Lvert);
        game.add(u);
        
        JButton v = new JButton("V");
        final JLabel vDisplay = new JLabel();
        vDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        vDisplay.setForeground(Color.BLACK);
        vDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        v.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(vCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        vDisplay.setText("");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    v.setBackground(Color.BLACK);
                    v.setOpaque(true);
                }
                vCheck = false;
            }
        });
        game.add(vDisplay);
        v.setBounds(bhori + bhorioffset*8, bdown + bvertoffset, Lhori, Lvert);
        game.add(v);
        
        JButton w = new JButton("w");
        final JLabel wDisplay = new JLabel();
        wDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        wDisplay.setForeground(Color.BLACK);
        wDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        w.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(wCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        wDisplay.setText("");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    w.setBackground(Color.BLACK);
                    w.setOpaque(true);
                }
                wCheck = false;
            }
        });
        game.add(wDisplay);
        w.setBounds(bhori + bhorioffset*9, bdown + bvertoffset, Lhori+2, Lvert);
        game.add(w);
        
        JButton x = new JButton("X");
        final JLabel xDisplay = new JLabel();
        xDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        xDisplay.setForeground(Color.BLACK);
        xDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        x.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(xCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        xDisplay.setText("");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    x.setBackground(Color.BLACK);
                    x.setOpaque(true);
                }
                xCheck = false;
            }
        });
        game.add(xDisplay);
        x.setBounds(bhori + bhorioffset*10, bdown + bvertoffset, Lhori, Lvert);
        game.add(x);
        
        JButton y = new JButton("Y");
        final JLabel yDisplay = new JLabel();
        yDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        yDisplay.setForeground(Color.BLACK);
        yDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        y.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(yCheck) {
                    if(realRand == 2) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        yDisplay.setText("                      Y");
                        System.out.println("Success: " + success);
                    }
                    
                    else if(realRand == 4) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        yDisplay.setText("                      Y");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    y.setBackground(Color.BLACK);
                    y.setOpaque(true);
                }
                yCheck = false;
            }
        });
        game.add(yDisplay);
        y.setBounds(bhori + bhorioffset*11, bdown + bvertoffset, Lhori, Lvert);
        game.add(y);
        
        JButton z = new JButton("Z");
        final JLabel zDisplay = new JLabel();
        zDisplay.setBounds(220, ldown-lvertoffset, 200, 50);
        zDisplay.setForeground(Color.BLACK);
        zDisplay.setFont(new Font("Verdana", Font.BOLD, 18));
        z.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                if(zCheck) {
                    if(realRand == 42) {
                        success++;
                        if(success == counter) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        zDisplay.setText("");
                        System.out.println("Success: " + success);
                    }
                    
                    else {
                        fail++;
                        score = score - 10;
                        if(fail == 6) {
                            colorGameFrame.colorGameFrame(score);
                            game.dispose();
                        }
                        System.out.println("Fail: " + fail);
                        System.out.println("Score: " + score);
                        displayScore.setText("Score: " + score);
                        hangman.setIcon(new ImageIcon(hangPic()));
                    }
                    z.setBackground(Color.BLACK);
                    z.setOpaque(true);
                }
                zCheck = false;
            }
        });
        game.add(zDisplay);
        z.setBounds(bhori + bhorioffset*12, bdown + bvertoffset, Lhori, Lvert);
        game.add(z);
        
        
        //Creating clock
        JLabel clock = new JLabel();
        Timer timer = new Timer(500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clock.setText(DateFormat.getDateTimeInstance().format(new Date()));
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.setInitialDelay(0);
        timer.start();
        
        JButton skip = new JButton("Skip"); //Creates button
        skip.addActionListener(new ActionListener() {   //Adds action listeners to button
            public void actionPerformed(ActionEvent e) {
                colorGameFrame.colorGameFrame(0);
                game.dispose();
            }
        });
        skip.setToolTipText("Skip this game (Recieve score of 0)");
        
        //Set letter tooltips
        a.setToolTipText("Select this letter");
        b.setToolTipText("Select this letter");
        c.setToolTipText("Select this letter");
        d.setToolTipText("Select this letter");
        ee.setToolTipText("Select this letter");
        f.setToolTipText("Select this letter");
        gg.setToolTipText("Select this letter");
        h.setToolTipText("Select this letter");
        i.setToolTipText("Select this letter");
        j.setToolTipText("Select this letter");
        k.setToolTipText("Select this letter");
        l.setToolTipText("Select this letter");
        m.setToolTipText("Select this letter");
        n.setToolTipText("Select this letter");
        o.setToolTipText("Select this letter");
        p.setToolTipText("Select this letter");
        q.setToolTipText("Select this letter");
        r.setToolTipText("Select this letter");
        s.setToolTipText("Select this letter");
        t.setToolTipText("Select this letter");
        u.setToolTipText("Select this letter");
        v.setToolTipText("Select this letter");
        w.setToolTipText("Select this letter");
        x.setToolTipText("Select this letter");
        y.setToolTipText("Select this letter");
        z.setToolTipText("Select this letter");
        
        //Set fonts
        clock.setFont(new Font("Verdana", Font.BOLD, 12));
        clock.setForeground(Color.BLACK);
        
        //Adds elements to frame
        game.add(skip);
        game.add(clock);
        game.add(displayScore);
        game.add(gameLabel);
        
        skip.setBounds(450, 50, Dhori, Dvert);    //Determinse the size and position of the buttons
        clock.setBounds(400, 5, 300, 30);
        
        //Draws background on frame and makes it visible
        game.add(g);
        game.pack();
        game.setVisible(true);
        game.setLocationRelativeTo(null);
    }
    
    public static String hangPic() {
        String path;
        switch(fail) {
            case 1:
                path = "src\\head.png";
                return path;
            case 2:
                path = "src\\body.png";
                return path;
            case 3: 
                path = "src\\arm1.png";
                return path;
            case 4:
                path = "src\\arm2.png";
                return path;
            case 5: 
                path = "src\\leg1.png";
                return path;
            case 6:
                path = "src\\leg2.png";
                return path;
        }
        return "null";
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
